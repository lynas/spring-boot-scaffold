spring:
  docker:
    compose:
      lifecycle-management: start_only
  application:
    name: spring-boot-scaffold
  jpa:
    properties:
      hibernate:
#        generate_statistics: true # dev env only
#        show_sql: true # dev env only
#        format_sql: true # dev env only
  datasource:
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DB:mydatabase}
    username: ${POSTGRES_USERNAME:myuser}
    password: ${POSTGRES_PASSWORD:secret}
  threads:
    virtual:
      enabled: true
app:
  rest:
    client:
      github:
        url: ${GITHUB_API_BASE_URL:https://api.github.com}
        username: ${GITHUB_API_USER_NAME:demo}
        password: ${GITHUB_API_PASSWORD:password}
resilience4j:
  retry:
    instances:
      githubService:
        maxAttempts: 5
        waitDuration: 2000ms # Duration to wait between retry attempts.

  circuitbreaker:
    instances:
      githubService:
        minimumNumberOfCalls: 5 # Minimum number of calls required before calculating failure rate. Prevents the circuit breaker from opening too early with too little data
        failureRateThreshold: 100 # Percentage of failures (out of successful + failed calls) that will open the circuit. 100 means if all calls fail, circuit will open.
        waitDurationInOpenState: 5s # How long the circuit breaker stays open before transitioning to half-open. During this period, no calls are allowed (short-circuited).
        automaticTransitionFromOpenToHalfOpenEnabled: true # When true, the circuit breaker automatically moves to half-open after waitDurationInOpenState expires. Otherwise, it would need a manual or scheduled transition.
  timelimiter:
    instances:
      githubService:
        timeoutDuration: 2000ms # Maximum execution time allowed for a method (like a REST call). If the call takes longer than 2000ms milliseconds, it's considered a timeout and the fallback is triggered or exception thrown.
        cancelRunningFuture: true # If true, the underlying CompletableFuture will be cancelled when a timeout occurs. Important for freeing resources (like threads) in long-running calls.